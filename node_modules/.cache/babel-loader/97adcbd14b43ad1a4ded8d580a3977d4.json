{"remainingRequest":"D:\\test\\H5\\node_modules\\babel-loader\\lib\\index.js!D:\\test\\H5\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\test\\H5\\src\\utils\\rtc-client.js","dependencies":[{"path":"D:\\test\\H5\\src\\utils\\rtc-client.js","mtime":1604634940000},{"path":"D:\\test\\H5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\test\\H5\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\test\\H5\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:/test/H5/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:/test/H5/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/test/H5/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable */\nimport TRTC from 'trtc-js-sdk';\n\nvar RtcClient = /*#__PURE__*/function () {\n  function RtcClient(options) {\n    _classCallCheck(this, RtcClient);\n\n    this.sdkAppId_ = options.sdkAppId;\n    this.userId_ = options.userId;\n    this.userSig_ = options.userSig;\n    this.roomId_ = options.roomId;\n    this.isJoined_ = false;\n    this.isPublished_ = false;\n    this.localStream_ = null;\n    this.remoteStreams_ = [];\n    this.ready = false; // check if browser is compatible with TRTC\n\n    TRTC.checkSystemRequirements().then(function (result) {\n      if (!result) {\n        alert('Your browser is not compatible with TRTC! Please download Chrome M72+');\n      }\n    });\n  }\n\n  _createClass(RtcClient, [{\n    key: \"join\",\n    value: function () {\n      var _join = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.isJoined_) {\n                  _context.next = 3;\n                  break;\n                }\n\n                console.warn('duplicate RtcClient.join() observed');\n                return _context.abrupt(\"return\");\n\n              case 3:\n                // create a client for RtcClient\n                this.client_ = TRTC.createClient({\n                  mode: 'videoCall',\n                  // 实时通话模式\n                  sdkAppId: this.sdkAppId_,\n                  userId: this.userId_,\n                  userSig: this.userSig_\n                }); // 处理 client 事件\n\n                this.handleEvents();\n                _context.prev = 5;\n                _context.next = 8;\n                return this.client_.join({\n                  roomId: this.roomId_\n                });\n\n              case 8:\n                console.log('join room success');\n                this.isJoined_ = true;\n                _context.next = 18;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](5);\n                window.dispatchEvent(new Event('leave'));\n                console.warn('RtcClient.join join room fail:', JSON.stringify(_context.t0));\n                alert('进房失败');\n                return _context.abrupt(\"return\");\n\n              case 18:\n                this.localStream_.on('player-state-changed', function (event) {\n                  console.log(\"local stream \".concat(event.type, \" player is \").concat(event.state));\n\n                  if (event.type === 'video' && event.state === 'PLAYING') {// dismiss the remote user UI placeholder\n                  } else if (event.type === 'video' && event.state === 'STOPPPED') {// show the remote user UI placeholder\n                  }\n                });\n\n                try {\n                  this.localStream_.play('local'); // 在id为 local 的 div 容器上播放本地音视频\n                } catch (e) {} // publish local stream by default after join the room\n\n\n                _context.next = 22;\n                return this.publish();\n\n              case 22:\n                console.log('发布本地流成功！');\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 12]]);\n      }));\n\n      function join() {\n        return _join.apply(this, arguments);\n      }\n\n      return join;\n    }()\n  }, {\n    key: \"leave\",\n    value: function () {\n      var _leave = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.isJoined_) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                console.warn('leave() - leave without join()d observed');\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                if (!this.isPublished_) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 6;\n                return this.unpublish(true);\n\n              case 6:\n                _context2.prev = 6;\n                _context2.next = 9;\n                return this.client_.leave();\n\n              case 9:\n                this.isJoined_ = false;\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](6);\n                location.reload();\n\n              case 15:\n                _context2.prev = 15;\n                // 停止本地流，关闭本地流内部的音视频播放器\n                this.localStream_.stop();\n                this.localStream_.close();\n                this.localStream_ = null; // 关闭本地流，释放摄像头和麦克风访问权限\n\n                return _context2.finish(15);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 12, 15, 20]]);\n      }));\n\n      function leave() {\n        return _leave.apply(this, arguments);\n      }\n\n      return leave;\n    }()\n  }, {\n    key: \"publish\",\n    value: function () {\n      var _publish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.isJoined_) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                console.warn('publish() - please join() firstly');\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                if (!this.isPublished_) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                console.warn('duplicate RtcClient.publish() observed');\n                return _context3.abrupt(\"return\");\n\n              case 6:\n                _context3.prev = 6;\n                _context3.next = 9;\n                return this.client_.publish(this.localStream_);\n\n              case 9:\n                this.isPublished_ = true;\n                _context3.next = 15;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](6);\n                this.isPublished_ = false;\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[6, 12]]);\n      }));\n\n      function publish() {\n        return _publish.apply(this, arguments);\n      }\n\n      return publish;\n    }()\n  }, {\n    key: \"unpublish\",\n    value: function () {\n      var _unpublish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(isLeaving) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.isJoined_) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                console.warn('unpublish() - please join() firstly');\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                if (this.isPublished_) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                console.warn('RtcClient.unpublish() called but not published yet');\n                return _context4.abrupt(\"return\");\n\n              case 6:\n                _context4.prev = 6;\n                _context4.next = 9;\n                return this.client_.unpublish(this.localStream_);\n\n              case 9:\n                this.isPublished_ = false;\n                _context4.next = 15;\n                break;\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](6);\n\n                if (!isLeaving) {\n                  console.warn('leaving the room because unpublish failure observed');\n                  this.leave();\n                }\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[6, 12]]);\n      }));\n\n      function unpublish(_x) {\n        return _unpublish.apply(this, arguments);\n      }\n\n      return unpublish;\n    }()\n  }, {\n    key: \"muteLocalAudio\",\n    value: function muteLocalAudio() {\n      this.localStream_.muteAudio();\n    }\n  }, {\n    key: \"unmuteLocalAudio\",\n    value: function unmuteLocalAudio() {\n      this.localStream_.unmuteAudio();\n    }\n  }, {\n    key: \"muteLocalVideo\",\n    value: function muteLocalVideo() {\n      this.localStream_.muteVideo();\n    }\n  }, {\n    key: \"unmuteLocalVideo\",\n    value: function unmuteLocalVideo() {\n      this.localStream_.unmuteVideo();\n    }\n  }, {\n    key: \"createLocalStream\",\n    value: function () {\n      var _createLocalStream = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(options) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.localStream_ = TRTC.createStream({\n                  audio: options.audio,\n                  // 采集麦克风\n                  video: options.video,\n                  // 采集摄像头\n                  userId: this.userId_ // cameraId: getCameraId(),\n                  // microphoneId: getMicrophoneId()\n\n                }); // 设置视频分辨率帧率和码率\n\n                this.localStream_.setVideoProfile('480p');\n                _context5.next = 4;\n                return this.localStream_.initialize();\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function createLocalStream(_x2) {\n        return _createLocalStream.apply(this, arguments);\n      }\n\n      return createLocalStream;\n    }()\n  }, {\n    key: \"handleEvents\",\n    value: function handleEvents() {\n      var _this = this;\n\n      // 处理 client 错误事件，错误均为不可恢复错误，建议提示用户后刷新页面\n      this.client_.on('error', function () {// alert(err);\n        // location.reload();\n      }); // 处理用户被踢事件，通常是因为房间内有同名用户引起，这种问题一般是应用层逻辑错误引起的\n      // 应用层请尽量使用不同用户ID进房\n\n      this.client_.on('client-banned', function () {// location.reload();\n      }); // 远端用户进房通知 - 仅限主动推流用户\n\n      this.client_.on('peer-join', function (evt) {\n        var userId = evt.userId;\n        console.log('peer-join ' + userId);\n      }); // 远端用户退房通知 - 仅限主动推流用户\n\n      this.client_.on('peer-leave', function (evt) {\n        var userId = evt.userId;\n        window.dispatchEvent(new Event('leave'));\n        console.log('peer-leave ' + userId);\n      }); // 处理远端流增加事件\n\n      this.client_.on('stream-added', function (evt) {\n        var remoteStream = evt.stream;\n        var id = remoteStream.getId();\n        var userId = remoteStream.getUserId();\n        console.log(\"remote stream added: [\".concat(userId, \"] ID: \").concat(id, \" type: \").concat(remoteStream.getType()));\n        console.log('subscribe to this remote stream'); // 远端流默认已订阅所有音视频，此处可指定只订阅音频或者音视频，不能仅订阅视频。\n        // 如果不想观看该路远端流，可调用 this.client_.unsubscribe(remoteStream) 取消订阅\n\n        _this.client_.subscribe(remoteStream);\n      }); // 远端流订阅成功事件\n\n      this.client_.on('stream-subscribed', function (evt) {\n        var remoteStream = evt.stream;\n        var id = remoteStream.getId();\n\n        _this.remoteStreams_.push(remoteStream);\n\n        try {\n          document.getElementsByName('remote')[0].setAttribute('id', id);\n          remoteStream.play(id); // 在指定的 div 容器上播放音视频\n        } catch (e) {}\n\n        console.log('stream-subscribed ID: ', id);\n      }); // 处理远端流被删除事件\n\n      this.client_.on('stream-removed', function (evt) {\n        var remoteStream = evt.stream;\n        var id = remoteStream.getId(); // 关闭远端流内部的音视频播放器\n\n        remoteStream.stop();\n        _this.remoteStreams_ = _this.remoteStreams_.filter(function (stream) {\n          return stream.getId() !== id;\n        });\n        console.log(\"stream-removed ID: \".concat(id, \"  type: \").concat(remoteStream.getType()));\n      }); // 处理远端流更新事件，在音视频通话过程中，远端流音频或视频可能会有更新\n\n      this.client_.on('stream-updated', function (evt) {\n        var remoteStream = evt.stream;\n        console.log('type: ' + remoteStream.getType() + ' stream-updated hasAudio: ' + remoteStream.hasAudio() + ' hasVideo: ' + remoteStream.hasVideo());\n      }); // 远端流音频或视频mute状态通知\n\n      this.client_.on('mute-audio', function (evt) {\n        console.log(evt.userId + ' mute audio');\n      });\n      this.client_.on('unmute-audio', function (evt) {\n        console.log(evt.userId + ' unmute audio');\n      });\n      this.client_.on('mute-video', function (evt) {\n        console.log(evt.userId + ' mute video');\n      });\n      this.client_.on('unmute-video', function (evt) {\n        console.log(evt.userId + ' unmute video');\n      }); // 信令通道连接状态通知\n\n      this.client_.on('connection-state-changed', function (evt) {\n        console.log(\"RtcClient state changed to \".concat(evt.state, \" from \").concat(evt.prevState));\n      });\n    }\n  }]);\n\n  return RtcClient;\n}();\n\nexport default RtcClient;",{"version":3,"sources":["D:/test/H5/src/utils/rtc-client.js"],"names":["TRTC","RtcClient","options","sdkAppId_","sdkAppId","userId_","userId","userSig_","userSig","roomId_","roomId","isJoined_","isPublished_","localStream_","remoteStreams_","ready","checkSystemRequirements","then","result","alert","console","warn","client_","createClient","mode","handleEvents","join","log","window","dispatchEvent","Event","JSON","stringify","on","event","type","state","play","e","publish","unpublish","leave","location","reload","stop","close","isLeaving","muteAudio","unmuteAudio","muteVideo","unmuteVideo","createStream","audio","video","setVideoProfile","initialize","evt","remoteStream","stream","id","getId","getUserId","getType","subscribe","push","document","getElementsByName","setAttribute","filter","hasAudio","hasVideo","prevState"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport TRTC from 'trtc-js-sdk'\n\nclass RtcClient {\n  constructor(options) {\n    this.sdkAppId_ = options.sdkAppId;\n    this.userId_ = options.userId;\n    this.userSig_ = options.userSig;\n    this.roomId_ = options.roomId;\n\n    this.isJoined_ = false;\n    this.isPublished_ = false;\n    this.localStream_ = null;\n    this.remoteStreams_ = [];\n    this.ready = false\n\n    // check if browser is compatible with TRTC\n    TRTC.checkSystemRequirements().then(result => {\n      if (!result) {\n        alert('Your browser is not compatible with TRTC! Please download Chrome M72+');\n      }\n    });\n  }\n\n  async join() {\n    if (this.isJoined_) {\n      console.warn('duplicate RtcClient.join() observed');\n      return;\n    }\n\n    // create a client for RtcClient\n    this.client_ = TRTC.createClient({\n      mode: 'videoCall', // 实时通话模式\n      sdkAppId: this.sdkAppId_,\n      userId: this.userId_,\n      userSig: this.userSig_\n    });\n\n    // 处理 client 事件\n    this.handleEvents();\n\n    try {\n      // join the room\n      await this.client_.join({ roomId: this.roomId_ });\n      console.log('join room success');\n      this.isJoined_ = true;\n    } catch (error) {\n      window.dispatchEvent(new Event('leave'));\n      console.warn('RtcClient.join join room fail:', JSON.stringify(error))\n      alert('进房失败')\n      return;\n    }\n\n    this.localStream_.on('player-state-changed', event => {\n      console.log(`local stream ${event.type} player is ${event.state}`);\n      if (event.type === 'video' && event.state === 'PLAYING') {\n        // dismiss the remote user UI placeholder\n      } else if (event.type === 'video' && event.state === 'STOPPPED') {\n        // show the remote user UI placeholder\n      }\n    });\n\n    try {\n      this.localStream_.play('local') // 在id为 local 的 div 容器上播放本地音视频\n    } catch (e) {\n    }\n\n    // publish local stream by default after join the room\n    await this.publish();\n    console.log('发布本地流成功！')\n  }\n\n  async leave() {\n    if (!this.isJoined_) {\n      console.warn('leave() - leave without join()d observed');\n      return;\n    }\n\n    if (this.isPublished_) {\n      // ensure the local stream has been unpublished before leaving.\n      await this.unpublish(true);\n    }\n\n    try {\n      // leave the room\n      await this.client_.leave();\n      this.isJoined_ = false;\n    } catch (error) {\n      location.reload();\n    } finally {\n      // 停止本地流，关闭本地流内部的音视频播放器\n        this.localStream_.stop();\n        this.localStream_.close();\n        this.localStream_ = null;\n      // 关闭本地流，释放摄像头和麦克风访问权限\n    }\n  }\n\n  async publish() {\n    if (!this.isJoined_) {\n      console.warn('publish() - please join() firstly');\n      return;\n    }\n    if (this.isPublished_) {\n      console.warn('duplicate RtcClient.publish() observed');\n      return;\n    }\n    try {\n      // 发布本地流\n      await this.client_.publish(this.localStream_);\n      this.isPublished_ = true;\n    } catch (error) {\n      this.isPublished_ = false;\n    }\n  }\n\n  async unpublish(isLeaving) {\n    if (!this.isJoined_) {\n      console.warn('unpublish() - please join() firstly');\n      return;\n    }\n    if (!this.isPublished_) {\n      console.warn('RtcClient.unpublish() called but not published yet');\n      return;\n    }\n\n    try {\n      // 停止发布本地流\n      await this.client_.unpublish(this.localStream_);\n      this.isPublished_ = false;\n    } catch (error) {\n      if (!isLeaving) {\n        console.warn('leaving the room because unpublish failure observed');\n        this.leave();\n      }\n    }\n  }\n\n  muteLocalAudio() {\n    this.localStream_.muteAudio();\n  }\n\n  unmuteLocalAudio() {\n    this.localStream_.unmuteAudio();\n  }\n\n  muteLocalVideo() {\n    this.localStream_.muteVideo();\n  }\n\n  unmuteLocalVideo() {\n    this.localStream_.unmuteVideo();\n  }\n\n  async createLocalStream(options) {\n    this.localStream_ = TRTC.createStream({\n      audio: options.audio, // 采集麦克风\n      video: options.video, // 采集摄像头\n      userId: this.userId_\n      // cameraId: getCameraId(),\n      // microphoneId: getMicrophoneId()\n    });\n    // 设置视频分辨率帧率和码率\n    this.localStream_.setVideoProfile('480p');\n\n    await this.localStream_.initialize();\n  }\n\n  handleEvents() {\n    // 处理 client 错误事件，错误均为不可恢复错误，建议提示用户后刷新页面\n    this.client_.on('error', () => {\n      // alert(err);\n      // location.reload();\n    });\n\n    // 处理用户被踢事件，通常是因为房间内有同名用户引起，这种问题一般是应用层逻辑错误引起的\n    // 应用层请尽量使用不同用户ID进房\n    this.client_.on('client-banned', () => {\n      // location.reload();\n    });\n\n    // 远端用户进房通知 - 仅限主动推流用户\n    this.client_.on('peer-join', evt => {\n      const userId = evt.userId;\n      console.log('peer-join ' + userId);\n    });\n    // 远端用户退房通知 - 仅限主动推流用户\n    this.client_.on('peer-leave', evt => {\n      const userId = evt.userId;\n      window.dispatchEvent(new Event('leave'));\n      console.log('peer-leave ' + userId);\n    });\n\n    // 处理远端流增加事件\n    this.client_.on('stream-added', evt => {\n      const remoteStream = evt.stream;\n      const id = remoteStream.getId();\n      const userId = remoteStream.getUserId();\n      console.log(`remote stream added: [${userId}] ID: ${id} type: ${remoteStream.getType()}`);\n      console.log('subscribe to this remote stream');\n      // 远端流默认已订阅所有音视频，此处可指定只订阅音频或者音视频，不能仅订阅视频。\n      // 如果不想观看该路远端流，可调用 this.client_.unsubscribe(remoteStream) 取消订阅\n      this.client_.subscribe(remoteStream);\n    });\n\n    // 远端流订阅成功事件\n    this.client_.on('stream-subscribed', evt => {\n      const remoteStream = evt.stream;\n      const id = remoteStream.getId();\n      this.remoteStreams_.push(remoteStream);\n      try {\n        document.getElementsByName('remote')[0].setAttribute('id', id);\n        remoteStream.play(id); // 在指定的 div 容器上播放音视频\n      } catch(e) {\n      }\n      console.log('stream-subscribed ID: ', id);\n    });\n\n    // 处理远端流被删除事件\n    this.client_.on('stream-removed', evt => {\n      const remoteStream = evt.stream;\n      const id = remoteStream.getId();\n      // 关闭远端流内部的音视频播放器\n      remoteStream.stop();\n      this.remoteStreams_ = this.remoteStreams_.filter(stream => {\n        return stream.getId() !== id;\n      });\n      console.log(`stream-removed ID: ${id}  type: ${remoteStream.getType()}`);\n    });\n\n    // 处理远端流更新事件，在音视频通话过程中，远端流音频或视频可能会有更新\n    this.client_.on('stream-updated', evt => {\n      const remoteStream = evt.stream;\n      console.log(\n        'type: ' +\n        remoteStream.getType() +\n        ' stream-updated hasAudio: ' +\n        remoteStream.hasAudio() +\n        ' hasVideo: ' +\n        remoteStream.hasVideo()\n      );\n    });\n\n    // 远端流音频或视频mute状态通知\n    this.client_.on('mute-audio', evt => {\n      console.log(evt.userId + ' mute audio');\n    });\n    this.client_.on('unmute-audio', evt => {\n      console.log(evt.userId + ' unmute audio');\n    });\n    this.client_.on('mute-video', evt => {\n      console.log(evt.userId + ' mute video');\n    });\n    this.client_.on('unmute-video', evt => {\n      console.log(evt.userId + ' unmute video');\n    });\n\n    // 信令通道连接状态通知\n    this.client_.on('connection-state-changed', evt => {\n      console.log(`RtcClient state changed to ${evt.state} from ${evt.prevState}`);\n    });\n  }\n}\n\nexport default RtcClient"]}]}